{"name":"Source extraction python","tagline":"Python implementation of a source extraction and spike inference algorithm for large scale calcium imaging data analysis, based on a constrained matrix factorization approach.","body":"Python translation of Constrained Non-negative Matrix Factorization algorithm for source extraction from calcium imaging data. \r\n\r\n[![Join the chat at https://gitter.im/agiovann/SOURCE_EXTRACTION_PYTHON](https://badges.gitter.im/agiovann/SOURCE_EXTRACTION_PYTHON.svg)](https://gitter.im/agiovann/SOURCE_EXTRACTION_PYTHON?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n# Deconvolution and demixing of calcium imaging data\r\n\r\nThe code implements a method for simultaneous source extraction and spike inference from large scale calcium imaging movies. The code is suitable for the analysis of somatic imaging data. Implementation for the analysis of dendritic/axonal imaging data will be added in the future. \r\n\r\nThe algorithm is presented in more detail in\r\n\r\nPnevmatikakis, E.A., Soudry, D., Gao, Y., Machado, T., Merel, J., ... & Paninski, L. (2016). Simultaneous denoising, deconvolution, and demixing of calcium imaging data. Neuron, in press, http://dx.doi.org/10.1016/j.neuron.2015.11.037\r\n\r\nPnevmatikakis, E.A., Gao, Y., Soudry, D., Pfau, D., Lacefield, C., ... & Paninski, L. (2014). A structured matrix factorization framework for large scale calcium imaging data analysis. arXiv preprint arXiv:1409.2903. http://arxiv.org/abs/1409.2903\r\n\r\n# Contributors\r\n\r\nAndrea Giovannucci and \r\nEftychios Pnevmatikakis \r\n\r\nCenter for Computational Biology, Simons Foundation, New York, NY\r\n\r\n\r\nCode description and related packages\r\n=======\r\n\r\nThis repository contains a Python implementation of the spatio-temporal demixing, i.e., (source extraction) code for large scale calcium imaging data. Related code can be found in the following links:\r\n\r\n## Python\r\n- [Source extraction with CNMF (this package)](https://github.com/agiovann/SOURCE_EXTRACTION_PYTHON)\r\n- [Group LASSO initialization and spatial CNMF](https://github.com/danielso/ROI_detect)\r\n\r\n## Matlab \r\n- [Constrained deconvolution and source extraction with CNMF](https://github.com/epnev/ca_source_extraction)\r\n- [MCMC spike inference](https://github.com/epnev/continuous_time_ca_sampler)\r\n- [Group LASSO initialization and spatial CNMF](https://github.com/danielso/ROI_detect)\r\n\r\n## Integration with other libraries\r\n- [SIMA](http://www.losonczylab.org/sima/1.3/): The [constrained deconvolution](https://github.com/losonczylab/sima/blob/master/sima/spikes.py) method has been integrated with SIMA, a Python based library for calcium imaging data analysis.\r\n- [Thunder](http://thunder-project.org/): The [group LASSO initialization and spatial CNMF](https://github.com/j-friedrich/thunder/tree/LocalNMF) method has been integrated with Thunder, a library for large scale neural data analysis with Spark.\r\n\r\nDependencies\r\n========\r\nThe code uses the following libraries\r\n- [NumPy](http://www.numpy.org/)\r\n- [SciPy](http://www.scipy.org/)\r\n- [Matplotlib](http://matplotlib.org/)\r\n- [Scikit-Learn](http://scikit-learn.org/stable/)\r\n- [Tifffile](https://pypi.python.org/pypi/tifffile) For reading tiff files. Other choices can work there too.\r\n\r\nExternal Dependencies\r\n============\r\n\r\nThe constrained deconvolution method (constrained_foopsi_python.py) can estimate with two different methods, each of which requires some additional packages:\r\n\r\n1. 'spgl1': For this option, the [SPGL1](https://github.com/epnev/SPGL1_python_port) python implementation is required. Please use the \"forked\" repository linked here.\r\n2. 'cvx': For this option, the following packages are needed:\r\n  * [CVXOPT](http://cvxopt.org/) Required.\r\n  * [PICOS](http://picos.zib.de/) Required.\r\n  * [MOSEK](https://www.mosek.com/) Optional but strongly recommended for speed improvement, free for academic use.\r\n\r\nIn general 'spgl1' can be faster, but the python implementation is not as fast as in Matlab and not thoroughly tested.\r\n\r\nQuestions, comments, issues\r\n=======\r\nPlease use the gitter chat room (use the button above) for questions and comments and create an issue for any bugs you might encounter.\r\n\r\nImportant note\r\n======\r\nThe implementation of this package is based on the matlab implementation which can be found [here](https://github.com/epnev/ca_source_extraction). Some of the Matlab features are currently lacking, but will be included in future releases. \r\n\r\nLicense\r\n=======\r\n\r\nThis program is free software; you can redistribute it and/or\r\nmodify it under the terms of the GNU General Public License\r\nas published by the Free Software Foundation; either version 2\r\nof the License, or (at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}